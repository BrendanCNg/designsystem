# Node CircleCI 2.0 configuration file to DTA cloud 2.0

version: 2
jobs:
<<<<<<< HEAD
  # TEST JOB
  # installing dependencies, building assets and testing
  test:
    docker:
      - image: circleci/node:8.9.1

    steps:
      - checkout
      - run: rm -rf node_modules
      - run: npm install
      - run: npm test


  # DEPLOY-STAGING JOB
  # installing dependencies, building assets and deploying to staging
  deploy-staging:
    docker:
      - image: circleci/node:8.9.1

    steps:
      - checkout                       # get the files from the repo (why would you ever not want the files????)
      - run: rm -rf node_modules       # delete node_modules to bust caching
      - run: npm install               # duh
      - run: npm run build             # required build step
      - run: rm -rf node_modules       # delete node_modules folder again to not push it to cf
      - run: sudo apt-get install apt-transport-https
      - run: wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
      - run: echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
      - run: sudo apt-get update
      - run: sudo apt-get install cf-cli
      - run: cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
      - run: cf version                # log what version we are running
      - run: cf login -a api.system.y.cld.gov.au -o $CF_ORG_STAGING -s $CF_SPACE_STAGING -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
      - run: cf zero-downtime-push designsystem -f manifest-staging.yml


  # DEPLOY-STAGING JOB
  # installing dependencies, building assets and deploying to production
  deploy-prod:
    docker:
      - image: circleci/node:8.9.1

    steps:
      - checkout
      - run: rm -rf node_modules
      - run: npm install
      - run: npm run build
      - run: rm -rf node_modules
      - run: sudo apt-get install apt-transport-https
      - run: wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
      - run: echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
      - run: sudo apt-get update
      - run: sudo apt-get install cf-cli
      - run: cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
      - run: cf version
      - run: cf login -a api.system.b.cld.gov.au -o $CF_ORG_PROD -s $CF_SPACE_PROD -u $CF_USER_PROD -p $CF_PASSWORD_PROD
      - run: cf zero-downtime-push designsystem -f manifest-prod.yml


  # DEPLOY-TEST JOB
  # installing dependencies, building assets and deploying to test branches
  deploy-test:
    docker:
      - image: circleci/node:8.9.1

    steps:
      - checkout
      - run: rm -rf node_modules
      - run: npm install
      - run: npm run build
      - run: rm -rf node_modules
      - run: sudo apt-get install apt-transport-https
      - run: wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
      - run: echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
      - run: sudo apt-get update
      - run: sudo apt-get install cf-cli
      - run: cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
      - run: cf version
      - run: cf login -a api.system.y.cld.gov.au -o $CF_ORG_STAGING -s $CF_SPACE_STAGING -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
      - run: cf zero-downtime-push designsystem-$CIRCLE_BRANCH -f manifest-testing.yml
=======
    build-and-test-ds:
        docker:
            - image: circleci/node:8.12.0
        working_directory: ~/designsystem
        steps:
            - checkout
            - restore_cache:
                name: Restore node_modules from cache
                keys:
                  - v2-npm-deps-{{ checksum "package.json" }}
            - run:
                name: Install Nodejs dependencies
                command: npm install
            - save_cache:
                name: Save node_modules to cache
                key: v2-npm-deps-{{ checksum "package.json" }}
                paths:
                  - node_modules
            - run:
                name: Generate static HTML!
                command: npm run build
            - persist_to_workspace:
                root: ~/designsystem
                paths:
                  - site/
                  - .deploy/
                  - server/
                  - content/
                  - package.json
                  - package-lock.json


    deploy-staging:
      docker:
          - image: govau/cf-cli
      steps:
          - attach_workspace:
              at: ~/designsystem
          - run:
              name: Deploy to cloud.gov.au
              command: |
                cd ~/designsystem
                mkdir -p deploy/
                mv site/ deploy/
                mv server deploy/
                mv content deploy/
                mv package.json deploy/
                mv package-lock.json deploy/
                mv .deploy/manifest-staging.yml deploy/
                cd deploy/
                cf login -a $CF_API_STAGING -o $CF_ORG_STAGING -s $CF_SPACE_STAGING -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
                cf zero-downtime-push designsystem -f manifest-staging.yml


    # DEPLOY-PROD JOB
    # installing dependencies, building assets and deploying to production
    deploy-prod:
        docker:
            - image: govau/cf-cli
        steps:
            - attach_workspace:
                at: ~/designsystem
            - run:
                name: Deploy to cloud.gov.au
                command: |
                  cd ~/designsystem
                  mkdir -p deploy/
                  mv site/ deploy/
                  mv server deploy/
                  mv content deploy/
                  mv package.json deploy/
                  mv package-lock.json deploy/
                  mv .deploy/manifest-prod.yml deploy/
                  cd deploy/
                  cf login -a $CF_API_PROD -o $CF_ORG_PROD -s $CF_SPACE_PROD -u $CF_USER_PROD -p $CF_PASSWORD_PROD
                  cf zero-downtime-push designsystem -f manifest-prod.yml


    # DEPLOY-TEST JOB
    # installing dependencies, building assets and deploying to test branches
    deploy-test:
        docker:
            - image: govau/cf-cli
        steps:
            - attach_workspace:
                at: ~/designsystem
            - run:
                name: Deploy to cloud.gov.au
                command: |
                  cd ~/designsystem
                  mkdir -p deploy/
                  mv site/ deploy/
                  mv server deploy/
                  mv content deploy/
                  mv package.json deploy/
                  mv package-lock.json deploy/
                  mv .deploy/manifest-testing.yml deploy/
                  cd deploy/
                  cf login -a $CF_API_STAGING -o $CF_ORG_STAGING -s $CF_SPACE_STAGING -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
                  cf zero-downtime-push designsystem-$CIRCLE_BRANCH -f manifest-testing.yml
>>>>>>> d503efd... Final pass


# OUR WORKFLOW
# this is where we orchestrate our jobs
workflows:
  version: 2
  deploying:
    jobs:
      - deploy-staging:       # run deploy staging
          filters:
            branches:
              only: develop   # and only on the `develop` branch

      - deploy-prod:          # run deploy production
          filters:
            branches:
              only: master    # and only on the `master` branch

      - deploy-test:          # run test branches
          filters:
            branches:
              only: /.*-test/ # and only on the branches that end with `-test`

  nightly-rebuild:            # rerun a task via scheduling, all times are UTC https://circleci.com/docs/2.0/workflows/#scheduling-a-workflow
    triggers:
      - schedule:
          cron: "0 14 * * *"  # 2PM utc => 1am or midnight (daylight saving)
          filters:
            branches:
              only: master    # we only run the master branch
    jobs:
      - deploy-prod           # and only the production deploy
